from graphlib import TopologicalSorter

from src.evolution.Animal import Animal
from src.evolution.Blueprint import BluePrint, get_neural_graph
import numpy as np
genome_dict = {'neurons': {0: {'type': 'i', 'bias': 0}, 1: {'type': 'i', 'bias': 0}, 2: {'type': 'i', 'bias': 0}, 3: {'type': 'i', 'bias': 0}, 4: {'type': 'i', 'bias': 0}, 5: {'type': 'i', 'bias': 0}, 6: {'type': 'i', 'bias': 0}, 7: {'type': 'i', 'bias': 0}, 8: {'type': 'o', 'bias': 0}, 9: {'type': 'o', 'bias': 0}, 10: {'type': 'o', 'bias': 0}, 11: {'type': 'o', 'bias': 0}, 12: {'type': 'h', 'bias': 1.9629083436782544}, 13: {'type': 'h', 'bias': 0.712617348312109}, 14: {'type': 'h', 'bias': 1.0907540067951889}, 15: {'type': 'h', 'bias': 0.3894218006994408}, 16: {'type': 'h', 'bias': -0.26922901031198176}, 17: {'type': 'h', 'bias': 0.41150465499109296}}, 'synapses': {100: {'nrn_to': 14, 'nrn_from': 0, 'weight': -0.12360733387646938, 'active': True}, 101: {'nrn_to': 17, 'nrn_from': 0, 'weight': 0.2397175207240289, 'active': True}, 105: {'nrn_to': 16, 'nrn_from': 6, 'weight': 1.6629725875524228, 'active': True}, 107: {'nrn_to': 10, 'nrn_from': 13, 'weight': 1.037062882049509, 'active': True}, 109: {'nrn_to': 8, 'nrn_from': 0, 'weight': 2.0861120680507037, 'active': True}, 110: {'nrn_to': 8, 'nrn_from': 6, 'weight': 0.14218556680857916, 'active': True}, 111: {'nrn_to': 13, 'nrn_from': 3, 'weight': -2.599720715693503, 'active': True}, 112: {'nrn_to': 11, 'nrn_from': 6, 'weight': -1.197247876728111, 'active': True}, 115: {'nrn_to': 16, 'nrn_from': 14, 'weight': -0.45274579634392287, 'active': True}, 116: {'nrn_to': 17, 'nrn_from': 14, 'weight': 0.35026707761622766, 'active': True}, 117: {'nrn_to': 16, 'nrn_from': 2, 'weight': 0.7303543294841078, 'active': True}, 118: {'nrn_to': 13, 'nrn_from': 4, 'weight': 0.5102800596063626, 'active': True}, 119: {'nrn_to': 15, 'nrn_from': 0, 'weight': -1.0210378743363435, 'active': True}, 120: {'nrn_to': 11, 'nrn_from': 13, 'weight': -0.6454897486386525, 'active': True}, 121: {'nrn_to': 14, 'nrn_from': 6, 'weight': 1.351766140252956, 'active': True}, 122: {'nrn_to': 14, 'nrn_from': 4, 'weight': -0.18867122864818464, 'active': True}, 123: {'nrn_to': 17, 'nrn_from': 6, 'weight': 2.711811599766337, 'active': True}, 124: {'nrn_to': 13, 'nrn_from': 0, 'weight': 0.1284998220930034, 'active': True}, 126: {'nrn_to': 16, 'nrn_from': 4, 'weight': -0.4654798330552248, 'active': True}, 127: {'nrn_to': 8, 'nrn_from': 7, 'weight': 1.3329228756763665, 'active': True}, 129: {'nrn_to': 15, 'nrn_from': 2, 'weight': 3.129855777880445, 'active': True}, 130: {'nrn_to': 10, 'nrn_from': 14, 'weight': 0.7149037773936324, 'active': True}, 132: {'nrn_to': 17, 'nrn_from': 13, 'weight': -1.0063307081235455, 'active': True}, 133: {'nrn_to': 8, 'nrn_from': 15, 'weight': 1.6594540803796436, 'active': True}, 134: {'nrn_to': 8, 'nrn_from': 16, 'weight': 1.0878672263763267, 'active': True}, 136: {'nrn_to': 13, 'nrn_from': 5, 'weight': 0.7045694910145668, 'active': True}, 137: {'nrn_to': 14, 'nrn_from': 7, 'weight': 0.02438488279647543, 'active': True}, 138: {'nrn_to': 8, 'nrn_from': 17, 'weight': -0.3163561919923848, 'active': True}, 139: {'nrn_to': 10, 'nrn_from': 6, 'weight': 0.4460256247069536, 'active': True}, 140: {'nrn_to': 9, 'nrn_from': 7, 'weight': 0.33336756381238836, 'active': True}, 141: {'nrn_to': 11, 'nrn_from': 7, 'weight': 0.5193626644508874, 'active': True}, 144: {'nrn_to': 12, 'nrn_from': 14, 'weight': -2.61257772620952, 'active': True}, 145: {'nrn_to': 15, 'nrn_from': 4, 'weight': -0.7874060075705541, 'active': True}, 146: {'nrn_to': 11, 'nrn_from': 4, 'weight': 0.24978982999463836, 'active': True}, 148: {'nrn_to': 10, 'nrn_from': 12, 'weight': -0.6045340510604923, 'active': True}, 149: {'nrn_to': 12, 'nrn_from': 7, 'weight': -0.00910414577713062, 'active': True}, 150: {'nrn_to': 11, 'nrn_from': 16, 'weight': 0.33258714629796976, 'active': True}, 155: {'nrn_to': 9, 'nrn_from': 1, 'weight': 1.493928289487191, 'active': True}, 156: {'nrn_to': 15, 'nrn_from': 5, 'weight': 1.0855303717291207, 'active': True}, 157: {'nrn_to': 8, 'nrn_from': 4, 'weight': -0.9382910272628185, 'active': True}, 158: {'nrn_to': 10, 'nrn_from': 2, 'weight': 0.053628722854907655, 'active': True}, 159: {'nrn_to': 8, 'nrn_from': 12, 'weight': 0.5631966715213771, 'active': True}, 160: {'nrn_to': 12, 'nrn_from': 5, 'weight': -1.1612067241805981, 'active': True}, 161: {'nrn_to': 15, 'nrn_from': 3, 'weight': 1.1509213866194568, 'active': True}, 163: {'nrn_to': 12, 'nrn_from': 4, 'weight': 0.09741107198040959, 'active': True}, 164: {'nrn_to': 8, 'nrn_from': 3, 'weight': -0.5073311096639723, 'active': True}, 166: {'nrn_to': 9, 'nrn_from': 2, 'weight': -0.20033517172223994, 'active': True}, 167: {'nrn_to': 10, 'nrn_from': 4, 'weight': 1.2449159326489596, 'active': True}, 171: {'nrn_to': 9, 'nrn_from': 12, 'weight': 0.1741238636178655, 'active': True}, 173: {'nrn_to': 9, 'nrn_from': 4, 'weight': -0.10572815772438378, 'active': True}, 174: {'nrn_to': 15, 'nrn_from': 15, 'weight': -0.14126460854276426, 'active': False}, 176: {'nrn_to': 9, 'nrn_from': 17, 'weight': -0.7400250741463862, 'active': True}, 177: {'nrn_to': 10, 'nrn_from': 5, 'weight': 0.09730410541103543, 'active': True}, 178: {'nrn_to': 14, 'nrn_from': 14, 'weight': 1.7599569161599997, 'active': False}, 180: {'nrn_to': 16, 'nrn_from': 17, 'weight': -0.051338933606812284, 'active': False}, 182: {'nrn_to': 14, 'nrn_from': 17, 'weight': 0.2620300692993231, 'active': False}, 184: {'nrn_to': 10, 'nrn_from': 17, 'weight': -0.3024127782803324, 'active': True}, 185: {'nrn_to': 10, 'nrn_from': 7, 'weight': 0.7932714618293941, 'active': True}, 186: {'nrn_to': 9, 'nrn_from': 3, 'weight': 0.29762570102144426, 'active': True}, 188: {'nrn_to': 15, 'nrn_from': 7, 'weight': -1.284129152499113, 'active': True}, 190: {'nrn_to': 10, 'nrn_from': 16, 'weight': 0.6070035177910186, 'active': True}, 191: {'nrn_to': 11, 'nrn_from': 1, 'weight': 0.608386420879044, 'active': True}, 194: {'nrn_to': 12, 'nrn_from': 2, 'weight': -0.592927903280473, 'active': True}, 195: {'nrn_to': 16, 'nrn_from': 7, 'weight': 0.6015568650290807, 'active': True}, 197: {'nrn_to': 10, 'nrn_from': 15, 'weight': -2.461126696422689, 'active': True}, 0: {'nrn_to': 17, 'nrn_from': 16, 'weight': 0.38831293571793457, 'active': True}}}
ni = 3
no = 1
neural_graph = get_neural_graph(genome_dict, active_only=True)
top_sorter = TopologicalSorter(neural_graph)
res = top_sorter._find_cycle()
cycle = None if res is None else res[:-1]
print(cycle)
# blueprint = BluePrint(genome_dict=genome_dict, innovation_handler=None, n_inputs=ni, n_outputs=no)
# animal = Animal(blueprint, action_type="Continuous", action_noise=0, action_bounds=(-1, 1))
# inputs = np.random.randn(ni)
# animal.react(inputs)